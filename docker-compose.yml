version: '3'

services:
  db:
    container_name: mysql
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: my_app
      MYSQL_USER: app_user
      MYSQL_PASSWORD: secret-pw
      MYSQL_ROOT_PASSWORD: secret-pw
    restart: on-failure
    user: mysql
    ports:
      - "3306:3306"
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - db_network
    healthcheck:
      test: mysqladmin -u root -p'$$MYSQL_ROOT_PASSWORD' ping -h localhost
      interval: 1s
      timeout: 40s
      retries: 30
      start_period: 5s

  # Se preferir usar Postgres, tudo que terá que fazer é remover o
  # bloco de definição do MySQL e descomentar este aqui:
  # db:
  #   container_name: postgres
  #   image: postgres:13.3-alpine
  #   environment:
  #     POSTGRES_DB: my_app
  #     POSTGRES_USER: app_user
  #     POSTGRES_PASSWORD: secret-pw
  #   restart: on-failure
  #   user: postgres
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - db-data:/var/lib/mysql
  #   networks:
  #     - db_network
  #   healthcheck:
  #     test: pg_isready -U postgres
  #     interval: 1s
  #     timeout: 15s
  #     retries: 20

  php:
    container_name: php
    image: fabiojanio/php:8.1-alpine3.16
    volumes:
      - /your/project/here:/app
      #- ./config/php.ini:/usr/local/etc/php
    working_dir: /app
    restart: on-failure
    user: www-data
    ports:
      - "8080:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - db_network
    command: >
      sh -c "php artisan migrate
      && php artisan serve --host=0.0.0.0 --port=80"
    # Veja outro exemplo, só que desta vez rodando as migrations e o servidor
    # web embutido do Yii Framework:
    # command: >
    #   sh -c "php yii migrate/up --interactive 0
    #   && php yii serve 0.0.0.0:80"

volumes:
  db-data:

networks:
  db_network:
    driver: bridge
